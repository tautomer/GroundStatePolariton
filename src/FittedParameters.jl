# for PES and DM fitted values

# Fourier series fitted parameters
# dipole
const dipoleCoeff = Array{Float64, 3}(undef, 4, 6, 2)
# barrier 1 (original one)
@views dipoleCoeff[:, :, 1] = [0.8017194824351892 3.2923071635398693 1.9571015898154989 4.721532196133278 7.745224719320653 6.217082808943054;
    3.1415926535894014 3.1415926535945484 -3.1415926535898957 3.141592653598072 3.141592653535209 -1.760747833413431e-11;
    1.3496422641395616 0.07841064324878252 0.31897867072301 0.019819260283106183 0.0012061473577049471 -0.005001264129667085;
    -1.0820344974786262 -0.2581519224657358 -0.6242736635892374 -0.09357727553023139 -0.009341882330039646 0.031093273243536782]

# barrier 3
@views dipoleCoeff[:, :, 2] = [0.5794863529853382 2.3981877995377228 1.4277236122766506 3.1789301472774656 3.6866280263417757 4.724054860159284;
    -3.141592653586859 -3.1415926535391567 -3.141592653580421 -3.1415926534558234 3.443708e-11 3.1415926531118123;
    1.9119027353298876 0.08731772029291504 0.415055697793705 0.01194266305188635 -0.01147093961174539 0.00343253857060752;
    -1.107921543359009 -0.2094042914899163 -0.5925848201500343 -0.037964891614418225 0.0422890874611346 -0.016215500517162]
# barrier 2
# @views dipoleCoeff[:, :, 2] = [0.6682414158377498 2.5341299623690787 1.6228210716179499 2.9955380751759093 4.077347844089163 5.318040777818234;
#     3.141593002289314 -3.141692072187532 3.141563631914672 -3.1412704696290312 3.142122353330361 3.137607199510993;
#     1.629369520519049 0.05787573743272387 0.37475643698078914 0.04536792444523766 0.01956710086981198 0.00488727013423244;
#     -1.0888121953145249 -0.1466646403224712 -0.6081626426568889 -0.1359013450674133 -0.07978187654660306 -0.02599070186606131]

# potenial
# barrier 2
# const a0 = [10.57736395947237, 5.179243463484069]
# barrier 1 and 3
const a0 = [10.57736395947237, 9.430143743413183]
const pesCoeff = Array{Float64, 3}(undef, 3, 8, 2)
# barrier 1 (original one)
@views pesCoeff[:, :, 1] = [0.4480425396401699 0.8960850792803398 1.3441276189205096 1.7921701585606795 2.2402126982008492 2.688255237841019 3.136297777481189 3.584340317121359;
    -19.07993156151155 14.132538112430545 -8.669598196769785 4.440544955027029 -1.841789733545533 0.5938508511955884 -0.13456854929031054 0.017221210502076565;
    -8.548620992980267 12.663956534909747 -11.653046381221715 7.958212156146616 -4.126000748504662 1.5964226612228885 -0.42204704205806876 0.0617266791122268]
# barrier 3
@views pesCoeff[:, :, 2] = [0.3148597268760023 0.6297194537520046 0.9445791806280068 1.259438907504009 1.5742986343800114 1.8891583612560137 2.204018088132016 2.518877815008018;
    -17.056776018971753 12.684388476618897 -7.796069653774027 3.986062471856632 -1.6451493317417076 0.5255338546210525 -0.1174937853993431 0.01470984132002242;
    -5.370491838718592 7.987606182674673 -7.3640050856807395 5.020202164797847 -2.5899563463121584 0.9928166755804637 -0.25895842826325355 0.03705229296329274]
# barrier 2
# @views pesCoeff[:, :, 2] = [.38947313798541483 0.7789462759708297 1.1684194139562445 1.5578925519416593 1.9473656899270742 2.336838827912489 2.726311965897904 3.1157851038833186;
#     -9.305487165006475 6.851423369223776 -4.171445245953479 2.1451665685297376 -0.9003693364746488 0.2973319556243463 -0.06968778311723628 0.00947416179711479;
#     -3.6242372866380737 5.336890718556375 -4.873997609627526 3.3419390197867256 -1.7533483541131365 0.6948168586821255 -0.1899906369894192 0.029519452199230672]
 
# equilibirium position of R coordinate under the current potenials
const xeq = [-1.7359186005030567, -2.6521548898610567]
# reactive frequency
const ω0 = [0.0062736666471555754, 0.0041664552605917065]
# barrier frequency (take as real)
const ωb = [0.005955130194093557, 0.003803147230616714]
# μ at equilibirium
const μeq = [1.2197912355997298, 1.792260275373105]
# derivative of μ at TS 
const dμ0 = [-2.0984725146374075, -2.0063801345916743]
# negative derivative of μ at equilibirium
const dμeq = [0.2253318892690798, 0.27140241598883885]

"""
    function pes(x::T) where T<:Real

Fourier cosine series to compute the PES at x.
"""
function pes(x::Float64, k::Int64=1)
    v = a0[k]
    @inbounds @simd for i in eachindex(1:8)
        ϕ = pesCoeff[1, i, k] * x
        v += pesCoeff[2, i, k] * cos(ϕ)
    end
    return v
end

"""
    function dipole(x::T) where T<:Real

Fourier sine series to compute the permannet dipole at x.
`k` is used to index the barrier, defualt to 1.
"""
function dipole(x::Float64, k::Int64=1)
    mu = 0.0
    @inbounds @simd for i in eachindex(1:6)
        ϕ = dipoleCoeff[1, i, k] * x + dipoleCoeff[2, i, k]
        mu += dipoleCoeff[3, i, k] * sin(ϕ)
    end
    return mu
end

"""
    function dvdr(x::T) where T<:Real

Compute the negative derivative with respect to PES at x.
`k` is used to index the barrier, defualt to 1.
"""
function dvdr(x::Float64, k::Int64=1)
    dv = 0.0
    @inbounds @simd for i in eachindex(1:8)
        ϕ = pesCoeff[1, i, k] * x
        dv += pesCoeff[3, i, k] * sin(ϕ)
    end
    return dv
end

"""
    function dμdr(x::T) where T<:Real

Compute the negative derivative with respect to permannet dipole at x.
`k` is used to index the barrier, defualt to 1.
"""
function dμdr(x::Float64, k::Int64=1)
    dμ = 0.0
    @inbounds @simd for i in eachindex(1:6)
        ϕ = dipoleCoeff[1, i, k] * x + dipoleCoeff[2, i, k]
        dμ += dipoleCoeff[4, i, k] * cos(ϕ)
    end
    return dμ
end

function ddμdr(x::Float64, k::Int64=1)
    ddμ = 0.0
    @inbounds @simd for i in eachindex(1:6)
        ϕ = dipoleCoeff[1, i, k] * x + dipoleCoeff[2, i, k]
        ddμ += dipoleCoeff[4, i, k] * dipoleCoeff[1, i, k] * sin(ϕ)
    end
    return ddμ
end

function ddvdr(x::Float64, k::Int64=1)
    ddv = 0.0
    @inbounds @simd for i in eachindex(1:8)
        ϕ = pesCoeff[1, i, k] * x
        ddv += -pesCoeff[3, i, k] * pesCoeff[1, i, k] * cos(ϕ)
    end
    return ddv
end